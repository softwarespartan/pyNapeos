#!/usr/bin/python

import getopt
import os
import sys
import stnInfoLib;
import pyDate;
import pyDomes;

def mk2dstr(d):
    dstr = None;
    if d < 10:
        dstr = "0"+str(d);
    else:
        dstr = str(d);
        
    return dstr
    

ATX_FILE_PATH = "$HOME/db/files/atx/gps.atx";
APR_FILE_PATH = "$HOME/db/files/stat/gps/apr";

class ParseException(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)


shortArgs = "f:h"

longArgs = []
longArgs.append("file=");
longArgs.append("atx=");
longArgs.append("apr=");
longArgs.append("domesFile=");
longArgs.append("help");

def usage():
    print
    print
    print " info2dat -f /path/to/stninfo/file"
    print
    print "Convert GAMIT station info to NAPEOS format"
    print
    print "NOTE:  station info can be piped via stdin.  However, -f will veto stdin"
    print
    print "options:"
    print "-f, --file=          path to station list file with format countryCode::stationName"
    print "  , --atx=           path to atx file used for all stations (default: $HOME/db/files/atx/gps.atx ) MAX 80 chars length!"
    print "  , --apr=           path to apr file used for all stations (default: $HOME/db/files/stat/gps.apr) MAX 80 chars length!"
    print "  , --domesFile=     path to file with stnId DOMES which exists or will be initialized if not exists"
    print "-h, --help           display this message"
    print


def getInputArgs():
    
    stnInfoFilePath  = None;
    atxFilePath      = ATX_FILE_PATH;
    aprFilePath      = APR_FILE_PATH;
    domesFilePath    = None;
    
    try:
        opts, args = getopt.getopt(sys.argv[1:], shortArgs, longArgs)
        
    except getopt.GetoptError, err:
        
        # print help information and exit:
        print str(err)
        usage()
        sys.exit(2)
        
    for option,arg in opts:
        
        #print option, arg
            
        if option in ("-f","--file"):
            
            if not os.path.isfile(arg):
                raise ParseException(" file: "+ arg+" does not exist ");
            
            stnInfoFilePath = arg;
            
        if option in ("--atx"):
            atxFilePath = arg;
            
        if option in ("--apr"):
            aprFilePath = arg;
            
        if option in ("--domesFile"):
            domesFilePath = arg;
            
        if option in ("-h","--help"):
            usage();
            sys.exit();

    
    return stnInfoFilePath, atxFilePath, aprFilePath, domesFilePath;

def parse(file,aprFilePath=APR_FILE_PATH, atxFilePath=ATX_FILE_PATH,domesFilePath = None):
    
    stnInfoFile = stnInfoLib.StnInfoCollection(file);

    domesMgr = pyDomes.Domes(domesFilePath);

    indx = 1;
    
    print "NSTADB    "+str(stnInfoFile.numberOfLines());
    
    for stnInfo in stnInfoFile:
        
        # set the station name we're working with
        stnName = stnInfo.getName().upper();
        
        # add the station to the domes mgr if it's not already defined
        if not domesMgr.containsStnId(stnName):
            stnName,domesNumber = domesMgr.addStn(stnName);
        else:
            domesNumber = domesMgr.domesForStnId(stnName);
            
        # control to print "S" or "-"
        isFirstLine = True;
        
        # row header
        tag = "S";
        
        # for each line in stnInfoObj ...
        for line in stnInfo:
            
            startDateStr = "%4d/%2s/%2s-00:00:00.000000" % (line.startDate.year,mk2dstr(line.startDate.month),mk2dstr(line.startDate.day));
            stopDateStr  = "%4d/%2s/%2s-00:00:00.000000" % (line.stopDate.year, mk2dstr(line.stopDate.month), mk2dstr(line.stopDate.day));
            rxVers = line.rx.vers;
                        
            print "%1s %4s GPS %10s %4d %9s %4s  0 %26s  0 %26s  %6.4f  %6.4f  %6.4f %-15s %4s %20s %-20s %-5s %-11s %-80s %-50s 1 %80s %-80s %10.2f %10.2f" % (tag,stnName.upper(),"",indx, domesNumber, stnName.upper(),startDateStr,stopDateStr, line.ant.n, line.ant.e, line.ant.ht, line.ant.type, line.ant.dome[0:4], line.ant.sn, line.rx.type,line.rx.sn[0:5], line.rx.vers[0:11], aprFilePath[0:80], "auto generated by info2dat.py", " ", atxFilePath[0:80],1575.42,1227.60)
            
            if isFirstLine:
                tag = "-";
                
        indx = indx + 1;
        
    print "endlist"
         
        
    if domesFilePath != None:
        domesMgr.export();
        
        
def main():
    
    (stnInfoFilePath, atxFilePath, aprFilePath, domesFilePath) = getInputArgs() 
    parse(stnInfoFilePath,atxFilePath, aprFilePath, domesFilePath);

if __name__ == '__main__':
    
    main()
            